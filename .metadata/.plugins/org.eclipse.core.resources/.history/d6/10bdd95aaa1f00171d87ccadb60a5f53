import java.util.*;

public class CommonMethod {
	public UndirectedGraphNode cloneGraph(UndirectedGraphNode startingNode){
		
		return null;
	}
	
	public List<UndirectedGraphNode> dfs(UndirectedGraphNode root){
		List<UndirectedGraphNode> list=new ArrayList<>();
		HashMap<Integer,UndirectedGraphNode> visited=new HashMap<>();
		
		dfs(root,list,visited);		
		
		return list;
	}
	private void dfs(UndirectedGraphNode node,List<UndirectedGraphNode> list,HashMap<Integer,UndirectedGraphNode> visited){
		list.add(node);
		visited.put(node.label, node);
		
		for(UndirectedGraphNode neighbor:node.neighbors){
			if(!visited.containsKey(neighbor.label)){
				dfs(neighbor,list,visited);
			}
		}
	}
	
	public List<UndirectedGraphNode> bfs(UndirectedGraphNode startingNode){}
		List<UndirectedGraphNode> list=new ArrayList<>();
		
		return list;
}

class UndirectedGraphNode{
	int label;
	List<UndirectedGraphNode> neighbors;
	
	UndirectedGraphNode(int label){
		this.label=label;
		neighbors=new ArrayList<>();
	}
}