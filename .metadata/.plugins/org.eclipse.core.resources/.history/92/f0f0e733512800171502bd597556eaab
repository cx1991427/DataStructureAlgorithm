import java.util.*;

public class WordSearch2 {
	public List<String> findWords(char[][] board,String[] words){
		List<String> res=new ArrayList<>();
		TrieNode root=buildTrie(words);
		
		for(int i=0;i<board.length;i++){
			for(int j=0;j<board[0].length;j++){
				helper(board,i,j,root,res);
			}
		}
		
		return res;
	}
	
	public void helper(char[][] board,int i,int j,TrieNode root, List<String> res){
		TrieNode node=root;
		
		char ch=board[i][j];
		
		if(node.child[board[i][j]-'a']==null){
			return;
		} 
		else{
			node=node.child[board[i][j]-'a'];
			if(node.word!=null){
				res.add(node.word);
				node.word=null;//remove duplicate
			}
			
			helper(board,i,j,node,res);
			
			board[i][j]='#';
			
			if(i-1>=0 && board[i-1][j]!='#') helper(board,i-1,j,node,res);
			if(i+1<=board.length-1 && board[i+1][j]!='#') helper(board,i+1,j,node,res);
			if(j-1>=0 && board[i][j-1]!='#') helper(board,i,j-1,node,res);
			if(j+1<=board[0].length-1 && board[i][j+1]!='#') helper(board,i,j+1,node,res);
			
			if(i-1>=0 && j-1>=0 && board[i-1][j-1]!='#') helper(board,i-1,j-1,node,res);
			if(i-1>=0 && j+1<=board[0].length-1 && board[i-1][j+1]!='#') helper(board,i-1,j+1,node,res);
			if(i+1<=board.length-1 && j-1>=0 && board[i+1][j-1]!='#') helper(board,i+1,j-1,node,res);
			if(i+1<=board.length-1 && j+1<=board[0].length-1) helper(board,i+1,j+1,node,res);
			
			board[i][j]=ch;
		}
	}
	
	public TrieNode buildTrie(String[] words){
		TrieNode root=new TrieNode();
		
		for(String word:words){//for(int i=0;i<words.length;i++){words[i]}
			TrieNode node=root;
			
			for(char ch:word.toCharArray()){
				if(node.child[ch-'a']==null){
					node.child[ch-'a']=new TrieNode();
				}
				node=node.child[ch-'a'];
			}
			node.word=word;
			
		}
		
		return root;
	}
}

class TrieNode{
//	boolean isWord;
	String word;
	TrieNode[] child;
	
	TrieNode(){
		child=new TrieNode[26];
	}
}
