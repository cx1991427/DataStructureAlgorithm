import java.util.*;

public class CommonMethod {
	public UndirectedGraphNode cloneGraph(UndirectedGraphNode startingNode){
		
		return null;
	}
	
	public List<UndirectedGraphNode> dfs(UndirectedGraphNode root){
		List<UndirectedGraphNode> list=new ArrayList<>();
		HashMap<Integer,UndirectedGraphNode> visited=new HashMap<>();
		
		dfs(root,list,visited);		
		
		return list;
	}
	private void dfs(UndirectedGraphNode node,List<UndirectedGraphNode> list,HashMap<Integer,UndirectedGraphNode> visited){
		list.add(node);
		visited.put(node.label, node);
		
		for(UndirectedGraphNode neighbor:node.neighbors){
			if(!visited.containsKey(neighbor.label)){
				dfs(neighbor,list,visited);
			}
		}
	}
	
	public List<UndirectedGraphNode> bfs(UndirectedGraphNode root){
		List<UndirectedGraphNode> list=new ArrayList<>();
		
		Queue<UndirectedGraphNode> queue=new LinkedList<>();
		queue.offer(root);
		list.add(root);
		HashMap<Integer,UndirectedGraphNode> hm=new HashMap<>();
		hm.put(root.label, root);
		
		while(!queue.isEmpty()){
			UndirectedGraphNode node=queue.poll();
			for(UndirectedGraphNode neighbor:node.neighbors){
				if(!hm.containsKey(neighbor.label)){
					queue.offer(neighbor);
					list.add(neighbor);
					hm.put(neighbor.label,neighbor);
				}
			}
		}
		
		return list;
	}
		
}

class UndirectedGraphNode{
	int label;
	List<UndirectedGraphNode> neighbors;
	
	UndirectedGraphNode(int label){
		this.label=label;
		neighbors=new ArrayList<>();
	}
}