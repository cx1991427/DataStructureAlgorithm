
public class BST {		//class BST<T extends Comparable<T> >
	//1: 
	public static class TreeNode{
		int val;
		TreeNode left,right;
		
		public TreeNode(int val){
			this.val=val;
		}
	}
	
	//2:attribute
	public TreeNode root;
	
	//3:constructor
	public BST(){
		root=null;
	}
	public BST(int val){
		root=new TreeNode(val);
	}
	
	//4:insert	
	public void insert(int x){
		insert(x,root);
	}
	private void insert(int x,TreeNode node){
		if(x==node.val){
			return;
		}
		else if(x<node.val){
			if(node.left==null){
				node.left=new TreeNode(x);
				return;
			}
			insert(x,node.left);
		}
		else{
			if(node.right==null){
				node.right=new TreeNode(x);
				return;
			}
			insert(x,node.right);
		}
	}
	
	//5:contains:
	public boolean contains(int x){
		return contains(x,root);
	}
	private boolean contains(int x,TreeNode node){
		if(node==null){
			return false;
		}
		
		if(x>node.val){
			return contains(x,node.right);
		}
		else if(x==node.val){
			return true;
		}
		else{
			return contains(x,node.left);
		}
	}
	
	//6:
	public TreeNode findMin(){
		return findMin(root);
	}
	private TreeNode findMin(TreeNode node){
		if(node.left==null){
			return node;
		}
		return findMin(node.left);
	}
	
	
	//7:
	public TreeNode findMax(){
		return findMax(root);
	}
	private TreeNode findMax(TreeNode node){
		while(node.right!=null){
			node=node.right;
		}
		return node;
	}	
	
	//8:
	public void remove(int x){
		
	}
}
