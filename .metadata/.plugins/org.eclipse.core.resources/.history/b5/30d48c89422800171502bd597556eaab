import java.util.*;

public class WordSearch2 {
	public List<String> findWords(char[][] board,String[] words){
		List<String> res=new ArrayList<>();
		TrieNode root=buildTrie(words);
		
//		helper(board,i,j,root,visited,res);
		
		return res;
	}
	
	public void helper(char[][] board,int i,int j,TrieNode root, List<String> res,boolean[][] visited){
		TrieNode node=root;
		
//		if(i<0 || i>= || j<0 || j>=){
//			return;
//		}
		if(visited[i][j]){
			return ;
		}
		if(node.child[board[i][j]-'a']==null){
			return;
		}
		else{
			if(){
				res.add();
			}
			node=node.child[board[i][j]-'a'];
			if(){
				return;
			}
		}
	}
	
	public TrieNode buildTrie(String[] words){
		TrieNode root=new TrieNode();
		
		for(String word:words){//for(int i=0;i<words.length;i++){words[i]}
			TrieNode node=root;
			
			for(char ch:word.toCharArray()){
				if(node.child[ch-'a']==null){
					node.child[ch-'a']=new TrieNode();
				}
				node=node.child[ch-'a'];
			}
			node.word=word;
			
		}
		
		return root;
	}
}

class TrieNode{
//	boolean isWord;
	String word;
	TrieNode[] child;
	
	TrieNode(){
		child=new TrieNode[26];
	}
}
